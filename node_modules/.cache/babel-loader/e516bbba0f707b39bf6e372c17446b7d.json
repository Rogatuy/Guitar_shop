{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { api, store } from '.';\nimport { APIRoute } from '../const';\nimport { errorHandle } from '../services/error-handle';\nimport { loadComments, toggleLoaderComments } from './comments-data/comments-data';\nimport { loadGuitarFull, toggleLoaderGuitarFull } from './guitar-full-data/guitar-full-data';\nimport { loadGuitars } from './guitars-data/guitars-data';\nimport { postUserComment } from './post-comment-data/post-comment-data';\nimport { reviewSendStatus } from './review-send-status/review-send-status';\nexport const fetchGuitarsAction = createAsyncThunk('data/fetchGuitars', async () => {\n  try {\n    const {\n      data\n    } = await api.get(APIRoute.Guitars);\n    store.dispatch(loadGuitars(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const fetchFullGuitarAction = createAsyncThunk('data/fetchFullGuitar', async id => {\n  try {\n    const {\n      data\n    } = await api.get(`${APIRoute.FullGuitar}/${id}`);\n    store.dispatch(loadGuitarFull(data));\n  } catch (error) {\n    errorHandle(error);\n    store.dispatch(toggleLoaderGuitarFull());\n  }\n});\nexport const fetchCommentsAction = createAsyncThunk('data/fetchComments', async id => {\n  try {\n    const {\n      data\n    } = await api.get(`${APIRoute.FullGuitar}/${id}/comments`);\n    store.dispatch(loadComments(data));\n  } catch (error) {\n    errorHandle(error);\n    store.dispatch(toggleLoaderComments(true));\n  }\n});\nexport const addComment = createAsyncThunk('data/addComment', async _ref => {\n  let {\n    guitarId,\n    userName,\n    advantage,\n    disadvantage,\n    comment,\n    rating\n  } = _ref;\n\n  try {\n    store.dispatch(reviewSendStatus('sending'));\n    await api.post(`${APIRoute.Comments}`, {\n      guitarId,\n      userName,\n      advantage,\n      disadvantage,\n      comment,\n      rating\n    });\n    store.dispatch(postUserComment({\n      guitarId,\n      userName,\n      advantage,\n      disadvantage,\n      comment,\n      rating\n    }));\n    store.dispatch(reviewSendStatus('initial'));\n  } catch (error) {\n    errorHandle(error);\n    store.dispatch(reviewSendStatus('error'));\n  }\n});","map":{"version":3,"sources":["C:/HTMLacademy/League_A/Greyd/Guitar_shop/src/store/api-actions.ts"],"names":["createAsyncThunk","api","store","APIRoute","errorHandle","loadComments","toggleLoaderComments","loadGuitarFull","toggleLoaderGuitarFull","loadGuitars","postUserComment","reviewSendStatus","fetchGuitarsAction","data","get","Guitars","dispatch","error","fetchFullGuitarAction","id","FullGuitar","fetchCommentsAction","addComment","guitarId","userName","advantage","disadvantage","comment","rating","post","Comments"],"mappings":"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","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { api, store } from '.';\r\nimport { APIRoute } from '../const';\r\nimport { errorHandle } from '../services/error-handle';\r\nimport { CommentPost, Comments } from '../types/comments';\r\nimport { Guitar, Guitars } from '../types/guitar';\r\nimport { loadComments, toggleLoaderComments } from './comments-data/comments-data';\r\nimport { loadGuitarFull, toggleLoaderGuitarFull } from './guitar-full-data/guitar-full-data';\r\nimport { loadGuitars } from './guitars-data/guitars-data';\r\nimport { postUserComment } from './post-comment-data/post-comment-data';\r\nimport { reviewSendStatus } from './review-send-status/review-send-status';\r\n\r\n\r\nexport const fetchGuitarsAction = createAsyncThunk(\r\n  'data/fetchGuitars',\r\n  async () => {\r\n    try {\r\n      const {data} = await api.get<Guitars>(APIRoute.Guitars);\r\n      store.dispatch(loadGuitars(data));\r\n    } catch(error) {\r\n      errorHandle(error);\r\n    }\r\n  },\r\n);\r\n\r\nexport const fetchFullGuitarAction = createAsyncThunk(\r\n  'data/fetchFullGuitar',\r\n  async (id: number) => {\r\n    try {\r\n      const {data} = await api.get<Guitar>(`${APIRoute.FullGuitar}/${id}`);\r\n      store.dispatch(loadGuitarFull(data));\r\n    } catch (error) {\r\n      errorHandle(error);\r\n      store.dispatch(toggleLoaderGuitarFull());\r\n    }\r\n  },\r\n);\r\n\r\nexport const fetchCommentsAction = createAsyncThunk(\r\n  'data/fetchComments',\r\n  async (id: number | null) => {\r\n    try {\r\n      const {data} = await api.get<Comments>(`${APIRoute.FullGuitar}/${id}/comments`);\r\n      store.dispatch(loadComments(data));\r\n    } catch (error) {\r\n      errorHandle (error);\r\n      store.dispatch(toggleLoaderComments(true));\r\n    }\r\n  },\r\n);\r\n\r\nexport const addComment = createAsyncThunk(\r\n  'data/addComment',\r\n  async ({guitarId, userName, advantage, disadvantage, comment, rating}:CommentPost) => {\r\n    try {\r\n      store.dispatch(reviewSendStatus('sending'));\r\n      await api.post<CommentPost>(`${APIRoute.Comments}`, {guitarId, userName, advantage, disadvantage, comment, rating});\r\n      store.dispatch(postUserComment({guitarId, userName, advantage, disadvantage, comment, rating}));\r\n      store.dispatch(reviewSendStatus('initial'));\r\n    } catch (error) {\r\n      errorHandle (error);\r\n      store.dispatch(reviewSendStatus('error'));\r\n    }\r\n  },\r\n);\r\n"]},"metadata":{},"sourceType":"module"}