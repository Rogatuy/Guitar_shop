{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { APIRoute } from '../const';\nimport { errorHandle } from '../services/error-handle';\nimport { loadComments, toggleLoaderComments } from './comments-data/comments-data';\nimport { loadGuitarFull, toggleLoaderGuitarFull } from './guitar-full-data/guitar-full-data';\nimport { loadGuitars } from './guitars-data/guitars-data';\nimport { reviewSendStatus } from './review-send-status/review-send-status';\nexport const fetchGuitarsAction = createAsyncThunk('data/fetchGuitars', async (_arg, _ref) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref;\n\n  try {\n    const {\n      data\n    } = await api.get(APIRoute.Guitars);\n    dispatch(loadGuitars(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const fetchFullGuitarAction = createAsyncThunk('data/fetchFullGuitar', async (id, _ref2) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref2;\n\n  try {\n    const {\n      data\n    } = await api.get(`${APIRoute.FullGuitar}/${id}`);\n    dispatch(loadGuitarFull(data));\n  } catch (error) {\n    errorHandle(error);\n    dispatch(toggleLoaderGuitarFull());\n  }\n});\nexport const fetchCommentsAction = createAsyncThunk('data/fetchComments', async (id, _ref3) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref3;\n\n  try {\n    const {\n      data\n    } = await api.get(`${APIRoute.FullGuitar}/${id}/comments`);\n    dispatch(loadComments(data));\n  } catch (error) {\n    errorHandle(error);\n    dispatch(toggleLoaderComments());\n  }\n});\nexport const addCommentOnSever = createAsyncThunk('data/addCommentOnServer', async (comment, _ref4) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref4;\n\n  try {\n    dispatch(reviewSendStatus('sending'));\n    await api.post(`${APIRoute.Comments}`, {\n      comment\n    });\n    dispatch(reviewSendStatus('initial'));\n  } catch (error) {\n    errorHandle(error);\n    dispatch(reviewSendStatus('error'));\n  }\n});","map":{"version":3,"sources":["C:/HTMLacademy/League_A/Greyd/Guitar_shop/src/store/api-actions.ts"],"names":["createAsyncThunk","APIRoute","errorHandle","loadComments","toggleLoaderComments","loadGuitarFull","toggleLoaderGuitarFull","loadGuitars","reviewSendStatus","fetchGuitarsAction","_arg","dispatch","extra","api","data","get","Guitars","error","fetchFullGuitarAction","id","FullGuitar","fetchCommentsAction","addCommentOnSever","comment","post","Comments"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,kBAAjC;AACA,SAASC,QAAT,QAAyB,UAAzB;AACA,SAASC,WAAT,QAA4B,0BAA5B;AAGA,SAASC,YAAT,EAAuBC,oBAAvB,QAAmD,+BAAnD;AACA,SAASC,cAAT,EAAyBC,sBAAzB,QAAuD,qCAAvD;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAASC,gBAAT,QAAiC,yCAAjC;AAKA,OAAO,MAAMC,kBAAkB,GAAGT,gBAAgB,CAKhD,mBALgD,EAMhD,OAAOU,IAAP,WAAwC;AAAA,MAA3B;AAACC,IAAAA,QAAD;AAAWC,IAAAA,KAAK,EAAEC;AAAlB,GAA2B;;AACtC,MAAI;AACF,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMD,GAAG,CAACE,GAAJ,CAAiBd,QAAQ,CAACe,OAA1B,CAArB;AACAL,IAAAA,QAAQ,CAACJ,WAAW,CAACO,IAAD,CAAZ,CAAR;AACD,GAHD,CAGE,OAAMG,KAAN,EAAa;AACbf,IAAAA,WAAW,CAACe,KAAD,CAAX;AACD;AACF,CAb+C,CAA3C;AAgBP,OAAO,MAAMC,qBAAqB,GAAGlB,gBAAgB,CAKnD,sBALmD,EAMnD,OAAOmB,EAAP,YAAsC;AAAA,MAA3B;AAACR,IAAAA,QAAD;AAAWC,IAAAA,KAAK,EAAEC;AAAlB,GAA2B;;AACpC,MAAI;AACF,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMD,GAAG,CAACE,GAAJ,CAAiB,GAAEd,QAAQ,CAACmB,UAAW,IAAGD,EAAG,EAA7C,CAArB;AACAR,IAAAA,QAAQ,CAACN,cAAc,CAACS,IAAD,CAAf,CAAR;AACD,GAHD,CAGE,OAAOG,KAAP,EAAc;AACdf,IAAAA,WAAW,CAACe,KAAD,CAAX;AACAN,IAAAA,QAAQ,CAACL,sBAAsB,EAAvB,CAAR;AACD;AACF,CAdkD,CAA9C;AAiBP,OAAO,MAAMe,mBAAmB,GAAGrB,gBAAgB,CAKjD,oBALiD,EAMjD,OAAOmB,EAAP,YAAsC;AAAA,MAA3B;AAACR,IAAAA,QAAD;AAAWC,IAAAA,KAAK,EAAEC;AAAlB,GAA2B;;AACpC,MAAI;AACF,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMD,GAAG,CAACE,GAAJ,CAAmB,GAAEd,QAAQ,CAACmB,UAAW,IAAGD,EAAG,WAA/C,CAArB;AACAR,IAAAA,QAAQ,CAACR,YAAY,CAACW,IAAD,CAAb,CAAR;AACD,GAHD,CAGE,OAAOG,KAAP,EAAc;AACdf,IAAAA,WAAW,CAAEe,KAAF,CAAX;AACAN,IAAAA,QAAQ,CAACP,oBAAoB,EAArB,CAAR;AACD;AACF,CAdgD,CAA5C;AAiBP,OAAO,MAAMkB,iBAAiB,GAAGtB,gBAAgB,CAK/C,yBAL+C,EAM/C,OAAOuB,OAAP,YAA+D;AAAA,MAA5B;AAACZ,IAAAA,QAAD;AAAWC,IAAAA,KAAK,EAAEC;AAAlB,GAA4B;;AAC7D,MAAI;AACFF,IAAAA,QAAQ,CAACH,gBAAgB,CAAC,SAAD,CAAjB,CAAR;AACA,UAAMK,GAAG,CAACW,IAAJ,CAA6B,GAAEvB,QAAQ,CAACwB,QAAS,EAAjD,EAAoD;AAACF,MAAAA;AAAD,KAApD,CAAN;AACAZ,IAAAA,QAAQ,CAACH,gBAAgB,CAAC,SAAD,CAAjB,CAAR;AACD,GAJD,CAIE,OAAOS,KAAP,EAAc;AACdf,IAAAA,WAAW,CAAEe,KAAF,CAAX;AACAN,IAAAA,QAAQ,CAACH,gBAAgB,CAAC,OAAD,CAAjB,CAAR;AACD;AACF,CAf8C,CAA1C","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { APIRoute } from '../const';\r\nimport { errorHandle } from '../services/error-handle';\r\nimport { CommentPostServer, Comments } from '../types/comments';\r\nimport { Guitar, Guitars } from '../types/guitar';\r\nimport { loadComments, toggleLoaderComments } from './comments-data/comments-data';\r\nimport { loadGuitarFull, toggleLoaderGuitarFull } from './guitar-full-data/guitar-full-data';\r\nimport { loadGuitars } from './guitars-data/guitars-data';\r\nimport { reviewSendStatus } from './review-send-status/review-send-status';\r\nimport { AppDispatch, State } from '../types/state';\r\nimport { AxiosInstance } from 'axios';\r\n\r\n\r\nexport const fetchGuitarsAction = createAsyncThunk<void, undefined, {\r\n  dispatch: AppDispatch,\r\n  state: State,\r\n  extra: AxiosInstance\r\n}>(\r\n  'data/fetchGuitars',\r\n  async (_arg, {dispatch, extra: api}) => {\r\n    try {\r\n      const {data} = await api.get<Guitars>(APIRoute.Guitars);\r\n      dispatch(loadGuitars(data));\r\n    } catch(error) {\r\n      errorHandle(error);\r\n    }\r\n  },\r\n);\r\n\r\nexport const fetchFullGuitarAction = createAsyncThunk<void, number, {\r\n  dispatch: AppDispatch,\r\n  state: State,\r\n  extra: AxiosInstance\r\n}>(\r\n  'data/fetchFullGuitar',\r\n  async (id, {dispatch, extra: api}) => {\r\n    try {\r\n      const {data} = await api.get<Guitar>(`${APIRoute.FullGuitar}/${id}`);\r\n      dispatch(loadGuitarFull(data));\r\n    } catch (error) {\r\n      errorHandle(error);\r\n      dispatch(toggleLoaderGuitarFull());\r\n    }\r\n  },\r\n);\r\n\r\nexport const fetchCommentsAction = createAsyncThunk<void, number, {\r\n  dispatch: AppDispatch,\r\n  state: State,\r\n  extra: AxiosInstance\r\n}>(\r\n  'data/fetchComments',\r\n  async (id, {dispatch, extra: api}) => {\r\n    try {\r\n      const {data} = await api.get<Comments>(`${APIRoute.FullGuitar}/${id}/comments`);\r\n      dispatch(loadComments(data));\r\n    } catch (error) {\r\n      errorHandle (error);\r\n      dispatch(toggleLoaderComments());\r\n    }\r\n  },\r\n);\r\n\r\nexport const addCommentOnSever = createAsyncThunk<void, CommentPostServer,  {\r\n  dispatch: AppDispatch,\r\n  state: State,\r\n  extra: AxiosInstance\r\n}>(\r\n  'data/addCommentOnServer',\r\n  async (comment: CommentPostServer, {dispatch, extra: api} ) => {\r\n    try {\r\n      dispatch(reviewSendStatus('sending'));\r\n      await api.post<CommentPostServer>(`${APIRoute.Comments}`, {comment});\r\n      dispatch(reviewSendStatus('initial'));\r\n    } catch (error) {\r\n      errorHandle (error);\r\n      dispatch(reviewSendStatus('error'));\r\n    }\r\n  },\r\n);\r\n"]},"metadata":{},"sourceType":"module"}