{"ast":null,"code":"import { MAX_RATING, ratingToText, ZERO } from './const';\nexport const convertRatingToText = ratingNumber => {\n  const wholeRating = Math.round(ratingNumber);\n\n  switch (wholeRating) {\n    case ratingToText.VeryBad:\n      return 'Очень плохо';\n\n    case ratingToText.Bad:\n      return 'Плохо';\n\n    case ratingToText.Normal:\n      return 'Удовлетворительно';\n\n    case ratingToText.Good:\n      return 'Хорошо';\n\n    case ratingToText.VeryGood:\n      return 'Отлично';\n  }\n};\nexport const convertTypeGuitarToText = typeGuitar => {\n  switch (typeGuitar) {\n    case 'electric':\n      return 'Электрическая';\n\n    case 'acoustic':\n      return 'Акустическая';\n\n    case 'ukulele':\n      return 'Укулеле';\n  }\n};\nexport const getRatingAttributes = rating => {\n  const ratingAttributes = [];\n  ratingAttributes.length = MAX_RATING;\n\n  for (let i = 0; i < ratingAttributes.length; i++) {\n    if (i < rating) {\n      ratingAttributes[i] = true;\n    } else {\n      ratingAttributes[i] = false;\n    }\n  }\n\n  return ratingAttributes;\n};\nexport const getSortComment = comments => comments.slice().sort((a, b) => Date.parse(b.createAt) - Date.parse(a.createAt));\nexport const scrollOnTop = () => {\n  window.scrollTo({\n    top: 0,\n    behavior: 'smooth'\n  });\n};\nexport const isNumberWithoutZero = value => value !== null && !isNaN(Number(value.toString())) && value !== undefined && value === ZERO;","map":{"version":3,"sources":["C:/HTMLacademy/League_A/Greyd/Guitar_shop/src/utils.ts"],"names":["MAX_RATING","ratingToText","ZERO","convertRatingToText","ratingNumber","wholeRating","Math","round","VeryBad","Bad","Normal","Good","VeryGood","convertTypeGuitarToText","typeGuitar","getRatingAttributes","rating","ratingAttributes","length","i","getSortComment","comments","slice","sort","a","b","Date","parse","createAt","scrollOnTop","window","scrollTo","top","behavior","isNumberWithoutZero","value","isNaN","Number","toString","undefined"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,YAArB,EAAmCC,IAAnC,QAA+C,SAA/C;AAIA,OAAO,MAAMC,mBAAmB,GAAKC,YAAF,IAA2B;AAC5D,QAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWH,YAAX,CAApB;;AACA,UAAQC,WAAR;AACE,SAAKJ,YAAY,CAACO,OAAlB;AACE,aAAO,aAAP;;AACF,SAAKP,YAAY,CAACQ,GAAlB;AACE,aAAO,OAAP;;AACF,SAAKR,YAAY,CAACS,MAAlB;AACE,aAAO,mBAAP;;AACF,SAAKT,YAAY,CAACU,IAAlB;AACE,aAAO,QAAP;;AACF,SAAKV,YAAY,CAACW,QAAlB;AACE,aAAO,SAAP;AAVJ;AAYD,CAdM;AAgBP,OAAO,MAAMC,uBAAuB,GAAKC,UAAF,IAAyB;AAC9D,UAAQA,UAAR;AACE,SAAK,UAAL;AACE,aAAO,eAAP;;AACF,SAAK,UAAL;AACE,aAAO,cAAP;;AACF,SAAK,SAAL;AACE,aAAO,SAAP;AANJ;AAQD,CATM;AAWP,OAAO,MAAMC,mBAAmB,GAAKC,MAAF,IAAqB;AACtD,QAAMC,gBAAgB,GAAG,EAAzB;AACAA,EAAAA,gBAAgB,CAACC,MAAjB,GAA0BlB,UAA1B;;AACA,OAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,gBAAgB,CAACC,MAArC,EAA6CC,CAAC,EAA9C,EAAkD;AAChD,QAAKA,CAAC,GAAGH,MAAT,EAAiB;AACfC,MAAAA,gBAAgB,CAACE,CAAD,CAAhB,GAAsB,IAAtB;AACD,KAFD,MAEO;AACLF,MAAAA,gBAAgB,CAACE,CAAD,CAAhB,GAAsB,KAAtB;AACD;AACF;;AACD,SAAOF,gBAAP;AACD,CAXM;AAaP,OAAO,MAAMG,cAAc,GAAIC,QAAD,IAAwBA,QAAQ,CAACC,KAAT,GAAiBC,IAAjB,CAAsB,CAACC,CAAD,EAAIC,CAAJ,KAAUC,IAAI,CAACC,KAAL,CAAWF,CAAC,CAACG,QAAb,IAAyBF,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACI,QAAb,CAAzD,CAA/C;AAEP,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC/BC,EAAAA,MAAM,CAACC,QAAP,CAAgB;AACdC,IAAAA,GAAG,EAAE,CADS;AAEdC,IAAAA,QAAQ,EAAE;AAFI,GAAhB;AAID,CALM;AAOP,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAC/BA,KAAK,KAAK,IAAX,IAAoB,CAACC,KAAK,CAACC,MAAM,CAACF,KAAK,CAACG,QAAN,EAAD,CAAP,CAA1B,IAAyDH,KAAK,KAAKI,SAAnE,IAAkFJ,KAAK,KAAKjC,IADxF","sourcesContent":["import { MAX_RATING, ratingToText, ZERO } from './const';\r\nimport { Comments } from './types/comments';\r\n\r\n\r\nexport const convertRatingToText = ( ratingNumber: number) => {\r\n  const wholeRating = Math.round(ratingNumber);\r\n  switch (wholeRating) {\r\n    case ratingToText.VeryBad :\r\n      return 'Очень плохо';\r\n    case ratingToText.Bad :\r\n      return 'Плохо';\r\n    case ratingToText.Normal :\r\n      return 'Удовлетворительно';\r\n    case ratingToText.Good :\r\n      return 'Хорошо';\r\n    case ratingToText.VeryGood :\r\n      return 'Отлично';\r\n  }\r\n};\r\n\r\nexport const convertTypeGuitarToText = ( typeGuitar: string) => {\r\n  switch (typeGuitar) {\r\n    case 'electric' :\r\n      return 'Электрическая';\r\n    case 'acoustic' :\r\n      return 'Акустическая';\r\n    case 'ukulele' :\r\n      return 'Укулеле';\r\n  }\r\n};\r\n\r\nexport const getRatingAttributes = ( rating: number) => {\r\n  const ratingAttributes = [];\r\n  ratingAttributes.length = MAX_RATING;\r\n  for (let i = 0; i < ratingAttributes.length; i++) {\r\n    if ( i < rating) {\r\n      ratingAttributes[i] = true;\r\n    } else {\r\n      ratingAttributes[i] = false;\r\n    }\r\n  }\r\n  return ratingAttributes;\r\n};\r\n\r\nexport const getSortComment = (comments: Comments) => comments.slice().sort((a, b) => Date.parse(b.createAt) - Date.parse(a.createAt));\r\n\r\nexport const scrollOnTop = () => {\r\n  window.scrollTo({\r\n    top: 0,\r\n    behavior: 'smooth',\r\n  });\r\n};\r\n\r\nexport const isNumberWithoutZero = (value: string | number ): boolean =>\r\n  ((value !== null) && !isNaN(Number(value.toString())) && (value !== undefined) && (value === ZERO));\r\n"]},"metadata":{},"sourceType":"module"}