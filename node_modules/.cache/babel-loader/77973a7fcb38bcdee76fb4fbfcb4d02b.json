{"ast":null,"code":"import { MAX_RATING, ratingToText } from './const';\nexport const convertRatingToText = ratingNumber => {\n  switch (ratingNumber) {\n    case ratingToText.VeryBad:\n      return 'Очень плохо';\n\n    case ratingToText.Bad:\n      return 'Плохо';\n\n    case ratingToText.Normal:\n      return 'Удовлетворительно';\n\n    case ratingToText.Good:\n      return 'Хорошо';\n\n    case ratingToText.VeryGood:\n      return 'Отлично';\n  }\n};\nexport const convertTypeGuitarToText = typeGuitar => {\n  switch (typeGuitar) {\n    case 'electric':\n      return 'Электрическая';\n\n    case 'acoustic':\n      return 'Акустическая';\n\n    case 'ukulele':\n      return 'Укулеле';\n  }\n};\nexport const getRatingAttributes = rating => {\n  const ratingAttributes = [];\n  ratingAttributes.length = MAX_RATING;\n\n  for (let i = 0; i < ratingAttributes.length; i++) {\n    if (i < rating) {\n      ratingAttributes[i] = true;\n    } else {\n      ratingAttributes[i] = false;\n    }\n  }\n\n  return ratingAttributes;\n};","map":{"version":3,"sources":["C:/HTMLacademy/League_A/Greyd/Guitar_shop/src/utils.ts"],"names":["MAX_RATING","ratingToText","convertRatingToText","ratingNumber","VeryBad","Bad","Normal","Good","VeryGood","convertTypeGuitarToText","typeGuitar","getRatingAttributes","rating","ratingAttributes","length","i"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,YAArB,QAAyC,SAAzC;AAGA,OAAO,MAAMC,mBAAmB,GAAKC,YAAF,IAA2B;AAC5D,UAAQA,YAAR;AACE,SAAKF,YAAY,CAACG,OAAlB;AACE,aAAO,aAAP;;AACF,SAAKH,YAAY,CAACI,GAAlB;AACE,aAAO,OAAP;;AACF,SAAKJ,YAAY,CAACK,MAAlB;AACE,aAAO,mBAAP;;AACF,SAAKL,YAAY,CAACM,IAAlB;AACE,aAAO,QAAP;;AACF,SAAKN,YAAY,CAACO,QAAlB;AACE,aAAO,SAAP;AAVJ;AAYD,CAbM;AAeP,OAAO,MAAMC,uBAAuB,GAAKC,UAAF,IAAyB;AAC9D,UAAQA,UAAR;AACE,SAAK,UAAL;AACE,aAAO,eAAP;;AACF,SAAK,UAAL;AACE,aAAO,cAAP;;AACF,SAAK,SAAL;AACE,aAAO,SAAP;AANJ;AAQD,CATM;AAWP,OAAO,MAAMC,mBAAmB,GAAKC,MAAF,IAAqB;AACtD,QAAMC,gBAAgB,GAAG,EAAzB;AACAA,EAAAA,gBAAgB,CAACC,MAAjB,GAA0Bd,UAA1B;;AACA,OAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,gBAAgB,CAACC,MAArC,EAA6CC,CAAC,EAA9C,EAAkD;AAChD,QAAKA,CAAC,GAAGH,MAAT,EAAiB;AACfC,MAAAA,gBAAgB,CAACE,CAAD,CAAhB,GAAsB,IAAtB;AACD,KAFD,MAEO;AACLF,MAAAA,gBAAgB,CAACE,CAAD,CAAhB,GAAsB,KAAtB;AACD;AACF;;AACD,SAAOF,gBAAP;AACD,CAXM","sourcesContent":["import { MAX_RATING, ratingToText } from './const';\r\n\r\n\r\nexport const convertRatingToText = ( ratingNumber: number) => {\r\n  switch (ratingNumber) {\r\n    case ratingToText.VeryBad :\r\n      return 'Очень плохо';\r\n    case ratingToText.Bad :\r\n      return 'Плохо';\r\n    case ratingToText.Normal :\r\n      return 'Удовлетворительно';\r\n    case ratingToText.Good :\r\n      return 'Хорошо';\r\n    case ratingToText.VeryGood :\r\n      return 'Отлично';\r\n  }\r\n};\r\n\r\nexport const convertTypeGuitarToText = ( typeGuitar: string) => {\r\n  switch (typeGuitar) {\r\n    case 'electric' :\r\n      return 'Электрическая';\r\n    case 'acoustic' :\r\n      return 'Акустическая';\r\n    case 'ukulele' :\r\n      return 'Укулеле';\r\n  }\r\n};\r\n\r\nexport const getRatingAttributes = ( rating: number) => {\r\n  const ratingAttributes = [];\r\n  ratingAttributes.length = MAX_RATING;\r\n  for (let i = 0; i < ratingAttributes.length; i++) {\r\n    if ( i < rating) {\r\n      ratingAttributes[i] = true;\r\n    } else {\r\n      ratingAttributes[i] = false;\r\n    }\r\n  }\r\n  return ratingAttributes;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}